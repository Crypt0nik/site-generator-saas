#!/bin/bash

# üß™ Script de test du syst√®me CMS
# Ce script va tester la g√©n√©ration d'un site avec le nouveau syst√®me de gestion de contenu

set -e

echo "üß™ Test du syst√®me de gestion de contenu (CMS)"
echo "==============================================="

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier que le serveur API tourne
log_info "V√©rification du serveur API..."
if ! curl -s http://localhost:3001/health > /dev/null; then
    log_error "Le serveur API n'est pas accessible sur le port 3001"
    log_info "Veuillez d√©marrer le serveur avec: cd api && npm run dev"
    exit 1
fi
log_success "Serveur API accessible"

# Test 1: G√©n√©ration d'un site test
log_info "Test 1: G√©n√©ration d'un site avec CMS..."
RESPONSE=$(curl -s -X POST http://localhost:3001/api/generator/generate \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Site Test CMS",
    "primaryColor": "#3b82f6",
    "secondaryColor": "#1f2937", 
    "accentColor": "#f59e0b",
    "template": "modern-saas",
    "features": {
      "auth": true,
      "payment": true,
      "blog": false,
      "analytics": true
    }
  }')

# Extraire le nom du fichier
FILENAME=$(echo $RESPONSE | grep -o '"filename":"[^"]*"' | cut -d'"' -f4)

if [ -z "$FILENAME" ]; then
    log_error "√âchec de la g√©n√©ration du site"
    echo $RESPONSE
    exit 1
fi

log_success "Site g√©n√©r√©: $FILENAME"

# Test 2: V√©rification du contenu du script
log_info "Test 2: V√©rification du contenu du script..."

# T√©l√©charger le script
curl -s "http://localhost:3001/api/generator/download/$FILENAME" > "test-script.sh"

# V√©rifier que les √©l√©ments CMS sont pr√©sents
if grep -q "create_content_management" test-script.sh; then
    log_success "Fonction de cr√©ation CMS trouv√©e"
else
    log_error "Fonction de cr√©ation CMS manquante"
    exit 1
fi

if grep -q "SiteContent::get" test-script.sh; then
    log_success "Utilisation de SiteContent dans le template"
else
    log_error "SiteContent non utilis√© dans le template"
    exit 1
fi

if grep -q "admin.*content" test-script.sh; then
    log_success "Routes d'administration pr√©sentes"
else
    log_error "Routes d'administration manquantes"
    exit 1
fi

if grep -q "ContentController" test-script.sh; then
    log_success "Contr√¥leur d'administration pr√©sent"
else
    log_error "Contr√¥leur d'administration manquant"
    exit 1
fi

# Test 3: V√©rification des migrations et seeders
log_info "Test 3: V√©rification des migrations et seeders..."

if grep -q "site_contents" test-script.sh; then
    log_success "Migration site_contents pr√©sente"
else
    log_error "Migration site_contents manquante"
    exit 1
fi

if grep -q "SiteContentSeeder" test-script.sh; then
    log_success "Seeder de contenu pr√©sent"
else
    log_error "Seeder de contenu manquant"
    exit 1
fi

# Test 4: V√©rification des vues d'administration
log_info "Test 4: V√©rification des vues d'administration..."

if grep -q "admin/layout.blade.php" test-script.sh; then
    log_success "Layout d'administration pr√©sent"
else
    log_error "Layout d'administration manquant"
    exit 1
fi

if grep -q "admin/content/index.blade.php" test-script.sh; then
    log_success "Vue de gestion de contenu pr√©sente"
else
    log_error "Vue de gestion de contenu manquante"
    exit 1
fi

# Test 5: V√©rification du contenu par d√©faut
log_info "Test 5: V√©rification du contenu par d√©faut..."

EXPECTED_CONTENTS=(
    "hero.*title.*Welcome to Site Test CMS"
    "hero.*subtitle.*Your premier destination"
    "hero.*cta_primary.*Explore Products"
    "features.*title.*Why Choose"
    "feature_1.*title.*Lightning Fast"
    "cta.*title.*Ready to Get Started"
)

for content in "${EXPECTED_CONTENTS[@]}"; do
    if grep -q "$content" test-script.sh; then
        log_success "Contenu par d√©faut trouv√©: $content"
    else
        log_warning "Contenu par d√©faut manquant: $content"
    fi
done

# Nettoyage
rm -f test-script.sh

# R√©sum√© des tests
echo ""
echo "üéâ R√©sum√© des tests"
echo "==================="
log_success "‚úÖ G√©n√©ration de site avec CMS"
log_success "‚úÖ Fonction de cr√©ation CMS"
log_success "‚úÖ Template utilisant SiteContent"
log_success "‚úÖ Routes d'administration"
log_success "‚úÖ Contr√¥leur d'administration"
log_success "‚úÖ Migration de base de donn√©es"
log_success "‚úÖ Seeder de contenu"
log_success "‚úÖ Vues d'administration"
log_success "‚úÖ Contenu par d√©faut"

echo ""
log_success "üéä Tous les tests sont pass√©s avec succ√®s !"
log_info "üí° Le syst√®me de gestion de contenu est enti√®rement fonctionnel"
echo ""
echo "üìã Pour tester un site complet :"
echo "   1. T√©l√©chargez un script g√©n√©r√©"
echo "   2. Ex√©cutez-le dans un dossier vide"
echo "   3. Connectez-vous au site"
echo "   4. Allez sur /admin/content"
echo "   5. Modifiez les textes !"
echo ""
